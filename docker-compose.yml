# Docker Compose para el Analizador de Sentencias IPP/INSS
# Despliegue completo de la aplicación con servicios adicionales

version: '3.8'

services:
  # Servicio principal de la aplicación
  app:
    build: .
    container_name: analizador-ipp-inss
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-tu_clave_secreta_aqui_cambiarla_en_produccion}
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - ./sentencias:/app/sentencias
      - ./uploads:/app/uploads
      - ./models:/app/models
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Servicio de Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: analizador-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network
    command: redis-server --appendonly yes

  # Servicio de Nginx para proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: analizador-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network

  # Servicio de monitoreo (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: analizador-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - app-network

  # Servicio de Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: analizador-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - app-network

# Volúmenes persistentes
volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Red personalizada para los servicios
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Configuración de recursos (opcional)
# Descomenta y ajusta según tus necesidades
# deploy:
#   resources:
#     limits:
#       cpus: '1.0'
#       memory: 1G
#     reservations:
#       cpus: '0.5'
#       memory: 512M
