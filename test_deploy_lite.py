#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de diagn√≥stico ligero para verificar dependencias b√°sicas en producci√≥n
"""

import sys
import os
from pathlib import Path

def test_basic_imports():
    """Prueba las importaciones b√°sicas"""
    print("üîç Probando importaciones b√°sicas...")
    
    # Test NumPy
    try:
        import numpy as np
        print(f"‚úÖ NumPy {np.__version__} - OK")
    except Exception as e:
        print(f"‚ùå NumPy - Error: {e}")
        return False
    
    # Test scikit-learn
    try:
        import sklearn
        print(f"‚úÖ scikit-learn {sklearn.__version__} - OK")
    except Exception as e:
        print(f"‚ùå scikit-learn - Error: {e}")
        return False
    
    # Test PyPDF2
    try:
        import PyPDF2
        print("‚úÖ PyPDF2 - OK")
    except Exception as e:
        print(f"‚ùå PyPDF2 - Error: {e}")
        return False
    
    # Test NLTK
    try:
        import nltk
        print(f"‚úÖ NLTK {nltk.__version__} - OK")
    except Exception as e:
        print(f"‚ùå NLTK - Error: {e}")
        return False
    
    return True

def test_model_files():
    """Verifica que los archivos del modelo est√©n presentes"""
    print("\nüîç Verificando archivos del modelo...")
    
    model_files = [
        "models/modelo_legal.pkl",
        "models/modelo_legal_sbert.pkl", 
        "models/frases_clave.json",
        "models/labels.json"
    ]
    
    all_present = True
    for file_path in model_files:
        if Path(file_path).exists():
            size = Path(file_path).stat().st_size
            print(f"‚úÖ {file_path} ({size} bytes)")
        else:
            print(f"‚ùå {file_path} - No encontrado")
            all_present = False
    
    return all_present

def test_model_loading():
    """Prueba la carga del modelo TF-IDF"""
    print("\nüîç Probando carga del modelo TF-IDF...")
    
    try:
        from backend.analisis import AnalizadorLegal
        analizador = AnalizadorLegal()
        
        if analizador.modelo is not None:
            print("‚úÖ Modelo TF-IDF cargado correctamente")
        else:
            print("‚ö†Ô∏è Modelo TF-IDF no cargado - usando reglas")
        
        # No probar SBERT para evitar problemas de memoria
        print("‚úÖ Saltando prueba de SBERT para evitar problemas de memoria")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error cargando modelo: {e}")
        return False

def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("üöÄ Iniciando diagn√≥stico ligero de dependencias...")
    print(f"Python: {sys.version}")
    print(f"Directorio de trabajo: {os.getcwd()}")
    
    # Verificar archivos
    files_ok = test_model_files()
    
    # Verificar importaciones b√°sicas
    imports_ok = test_basic_imports()
    
    # Verificar carga del modelo TF-IDF
    model_ok = test_model_loading()
    
    print(f"\nüìä Resumen del diagn√≥stico ligero:")
    print(f"- Archivos del modelo: {'‚úÖ' if files_ok else '‚ùå'}")
    print(f"- Importaciones b√°sicas: {'‚úÖ' if imports_ok else '‚ùå'}")
    print(f"- Carga del modelo TF-IDF: {'‚úÖ' if model_ok else '‚ùå'}")
    
    if files_ok and imports_ok:
        print("\nüéâ Diagn√≥stico completado - Sistema b√°sico listo")
        return 0
    else:
        print("\n‚ö†Ô∏è Diagn√≥stico completado - Hay problemas que resolver")
        return 1

if __name__ == "__main__":
    sys.exit(main())
